
/**
 * Custom Mega Menu Elementor Widget
 * 
 * @package YourTheme
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Register the widget
add_action('elementor/widgets/widgets_registered', 'register_mega_menu_widget');

function register_mega_menu_widget() {
    
// Create the widget class
class MegaMenuWidget extends \Elementor\Widget_Base {

    public function get_name() {
        return 'mega_menu_widget';
    }

    public function get_title() {
        return __('Mega Menu', 'your-theme');
    }

    public function get_icon() {
        return 'eicon-nav-menu';
    }

    public function get_categories() {
        return ['general'];
    }

    protected function _register_controls() {
        // Menu Items Section
        $this->start_controls_section(
            'section_menu_items',
            [
                'label' => __('Menu Items', 'your-theme'),
            ]
        );

        $repeater = new \Elementor\Repeater();

        $repeater->add_control(
            'item_title',
            [
                'label' => __('Title', 'your-theme'),
                'type' => \Elementor\Controls_Manager::TEXT,
                'default' => __('Menu Item', 'your-theme'),
                'label_block' => true,
            ]
        );

        $repeater->add_control(
            'item_link',
            [
                'label' => __('Link', 'your-theme'),
                'type' => \Elementor\Controls_Manager::URL,
                'placeholder' => __('https://your-link.com', 'your-theme'),
                'default' => [
                    'url' => '#',
                ],
            ]
        );

        $repeater->add_control(
            'has_megamenu',
            [
                'label' => __('Enable Mega Menu', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SWITCHER,
                'label_on' => __('Yes', 'your-theme'),
                'label_off' => __('No', 'your-theme'),
                'return_value' => 'yes',
                'default' => '',
            ]
        );

        $repeater->add_control(
            'megamenu_template',
            [
                'label' => __('Mega Menu Template', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SELECT2,
                'options' => $this->get_elementor_templates(),
                'condition' => [
                    'has_megamenu' => 'yes',
                ],
                'label_block' => true,
            ]
        );

        $this->add_control(
            'menu_items',
            [
                'label' => __('Menu Items', 'your-theme'),
                'type' => \Elementor\Controls_Manager::REPEATER,
                'fields' => $repeater->get_controls(),
                'default' => [
                    [
                        'item_title' => __('Menu Item 1', 'your-theme'),
                        'item_link' => ['url' => '#'],
                    ],
                ],
                'title_field' => '{{{ item_title }}}',
            ]
        );

        $this->end_controls_section();

        // Menu Settings
        $this->start_controls_section(
            'section_menu_settings',
            [
                'label' => __('Menu Settings', 'your-theme'),
            ]
        );

        $this->add_control(
            'menu_orientation',
            [
                'label' => __('Menu Orientation', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'horizontal',
                'options' => [
                    'horizontal' => __('Horizontal', 'your-theme'),
                    'vertical' => __('Vertical', 'your-theme'),
                ],
            ]
        );

        $this->add_control(
            'dropdown_trigger',
            [
                'label' => __('Dropdown Trigger', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SELECT,
                'default' => 'hover',
                'options' => [
                    'hover' => __('Hover', 'your-theme'),
                    'click' => __('Click', 'your-theme'),
                ],
            ]
        );

        $this->add_responsive_control(
            'menu_align',
            [
                'label' => __('Menu Alignment', 'your-theme'),
                'type' => \Elementor\Controls_Manager::CHOOSE,
                'options' => [
                    'flex-start' => [
                        'title' => __('Left', 'your-theme'),
                        'icon' => 'eicon-text-align-left',
                    ],
                    'center' => [
                        'title' => __('Center', 'your-theme'),
                        'icon' => 'eicon-text-align-center',
                    ],
                    'flex-end' => [
                        'title' => __('Right', 'your-theme'),
                        'icon' => 'eicon-text-align-right',
                    ],
                    'space-between' => [
                        'title' => __('Justified', 'your-theme'),
                        'icon' => 'eicon-text-align-justify',
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-container' => 'justify-content: {{VALUE}};',
                ],
                'default' => 'flex-start',
            ]
        );

        $this->end_controls_section();

        // Style Tab - Main Menu
        $this->start_controls_section(
            'section_style_main_menu',
            [
                'label' => __('Main Menu', 'your-theme'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Typography::get_type(),
            [
                'name' => 'menu_typography',
                'label' => __('Typography', 'your-theme'),
                'selector' => '{{WRAPPER}} .mega-menu-item > a',
            ]
        );

        $this->add_responsive_control(
            'menu_item_spacing',
            [
                'label' => __('Menu Item Spacing', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 20,
                ],
                'selectors' => [
                    '{{WRAPPER}} .horizontal .mega-menu-item' => 'margin-right: {{SIZE}}{{UNIT}};',
                    '{{WRAPPER}} .vertical .mega-menu-item' => 'margin-bottom: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_responsive_control(
            'menu_padding',
            [
                'label' => __('Menu Item Padding', 'your-theme'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', 'em', '%'],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item > a' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => '10',
                    'right' => '15',
                    'bottom' => '10',
                    'left' => '15',
                    'unit' => 'px',
                    'isLinked' => false,
                ],
            ]
        );

        // Normal, Hover, Active states for menu items
        $this->start_controls_tabs('menu_item_style_tabs');

        // Normal State
        $this->start_controls_tab(
            'menu_item_normal',
            [
                'label' => __('Normal', 'your-theme'),
            ]
        );

        $this->add_control(
            'menu_item_color',
            [
                'label' => __('Text Color', 'your-theme'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#333333',
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item > a' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'menu_item_bg_color',
            [
                'label' => __('Background Color', 'your-theme'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item > a' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Border::get_type(),
            [
                'name' => 'menu_item_border',
                'label' => __('Border', 'your-theme'),
                'selector' => '{{WRAPPER}} .mega-menu-item > a',
            ]
        );

        $this->add_responsive_control(
            'menu_item_border_radius',
            [
                'label' => __('Border Radius', 'your-theme'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', '%'],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item > a' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
            ]
        );

        $this->end_controls_tab();

        // Hover State
        $this->start_controls_tab(
            'menu_item_hover',
            [
                'label' => __('Hover', 'your-theme'),
            ]
        );

        $this->add_control(
            'menu_item_hover_color',
            [
                'label' => __('Text Color', 'your-theme'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#0073aa',
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item > a:hover' => 'color: {{VALUE}};',
                    '{{WRAPPER}} .mega-menu-item:hover > a' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'menu_item_hover_bg_color',
            [
                'label' => __('Background Color', 'your-theme'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item > a:hover' => 'background-color: {{VALUE}};',
                    '{{WRAPPER}} .mega-menu-item:hover > a' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Border::get_type(),
            [
                'name' => 'menu_item_hover_border',
                'label' => __('Border', 'your-theme'),
                'selector' => '{{WRAPPER}} .mega-menu-item > a:hover, {{WRAPPER}} .mega-menu-item:hover > a',
            ]
        );

        $this->add_control(
            'menu_item_hover_transition',
            [
                'label' => __('Transition Duration', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'default' => [
                    'size' => 0.3,
                ],
                'range' => [
                    'px' => [
                        'max' => 3,
                        'step' => 0.1,
                    ],
                ],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item > a' => 'transition: all {{SIZE}}s ease;',
                ],
            ]
        );

        $this->end_controls_tab();

        // Active State
        $this->start_controls_tab(
            'menu_item_active',
            [
                'label' => __('Active', 'your-theme'),
            ]
        );

        $this->add_control(
            'menu_item_active_color',
            [
                'label' => __('Text Color', 'your-theme'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#0073aa',
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item.active > a' => 'color: {{VALUE}};',
                    '{{WRAPPER}} .mega-menu-item.mega-menu-active > a' => 'color: {{VALUE}};',
                ],
            ]
        );

        $this->add_control(
            'menu_item_active_bg_color',
            [
                'label' => __('Background Color', 'your-theme'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-item.active > a' => 'background-color: {{VALUE}};',
                    '{{WRAPPER}} .mega-menu-item.mega-menu-active > a' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Border::get_type(),
            [
                'name' => 'menu_item_active_border',
                'label' => __('Border', 'your-theme'),
                'selector' => '{{WRAPPER}} .mega-menu-item.active > a, {{WRAPPER}} .mega-menu-item.mega-menu-active > a',
            ]
        );

        $this->end_controls_tab();

        $this->end_controls_tabs();

        $this->end_controls_section();

        // Style Tab - Mega Menu Dropdown
        $this->start_controls_section(
            'section_style_mega_menu',
            [
                'label' => __('Mega Menu Dropdown', 'your-theme'),
                'tab' => \Elementor\Controls_Manager::TAB_STYLE,
            ]
        );

        $this->add_control(
            'mega_menu_bg_color',
            [
                'label' => __('Background Color', 'your-theme'),
                'type' => \Elementor\Controls_Manager::COLOR,
                'default' => '#ffffff',
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-content' => 'background-color: {{VALUE}};',
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Border::get_type(),
            [
                'name' => 'mega_menu_border',
                'label' => __('Border', 'your-theme'),
                'selector' => '{{WRAPPER}} .mega-menu-content',
                'fields_options' => [
                    'border' => [
                        'default' => 'solid',
                    ],
                    'width' => [
                        'default' => [
                            'top' => '1',
                            'right' => '1',
                            'bottom' => '1',
                            'left' => '1',
                            'isLinked' => true,
                        ],
                    ],
                    'color' => [
                        'default' => '#eeeeee',
                    ],
                ],
            ]
        );

        $this->add_responsive_control(
            'mega_menu_border_radius',
            [
                'label' => __('Border Radius', 'your-theme'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', '%'],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-content' => 'border-radius: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => '0',
                    'right' => '0',
                    'bottom' => '4',
                    'left' => '4',
                    'unit' => 'px',
                    'isLinked' => false,
                ],
            ]
        );

        $this->add_group_control(
            \Elementor\Group_Control_Box_Shadow::get_type(),
            [
                'name' => 'mega_menu_box_shadow',
                'selector' => '{{WRAPPER}} .mega-menu-content',
                'fields_options' => [
                    'box_shadow_type' => [
                        'default' => 'yes',
                    ],
                    'box_shadow' => [
                        'default' => [
                            'horizontal' => 0,
                            'vertical' => 5,
                            'blur' => 15,
                            'spread' => 0,
                            'color' => 'rgba(0, 0, 0, 0.1)',
                        ],
                    ],
                ],
            ]
        );

        $this->add_responsive_control(
            'mega_menu_padding',
            [
                'label' => __('Padding', 'your-theme'),
                'type' => \Elementor\Controls_Manager::DIMENSIONS,
                'size_units' => ['px', 'em', '%'],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-content' => 'padding: {{TOP}}{{UNIT}} {{RIGHT}}{{UNIT}} {{BOTTOM}}{{UNIT}} {{LEFT}}{{UNIT}};',
                ],
                'default' => [
                    'top' => '20',
                    'right' => '20',
                    'bottom' => '20',
                    'left' => '20',
                    'unit' => 'px',
                    'isLinked' => true,
                ],
            ]
        );

        $this->add_responsive_control(
            'mega_menu_width',
            [
                'label' => __('Width', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px', '%', 'vw'],
                'range' => [
                    'px' => [
                        'min' => 220,
                        'max' => 1200,
                    ],
                    '%' => [
                        'min' => 10,
                        'max' => 100,
                    ],
                    'vw' => [
                        'min' => 10,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 800,
                ],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-content' => 'width: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_control(
            'mega_menu_offset_x',
            [
                'label' => __('Offset X', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => -100,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 0,
                ],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-content' => 'margin-left: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->add_control(
            'mega_menu_offset_y',
            [
                'label' => __('Offset Y', 'your-theme'),
                'type' => \Elementor\Controls_Manager::SLIDER,
                'size_units' => ['px'],
                'range' => [
                    'px' => [
                        'min' => 0,
                        'max' => 100,
                    ],
                ],
                'default' => [
                    'unit' => 'px',
                    'size' => 0,
                ],
                'selectors' => [
                    '{{WRAPPER}} .mega-menu-content' => 'margin-top: {{SIZE}}{{UNIT}};',
                ],
            ]
        );

        $this->end_controls_section();
    }

    protected function render() {
        $settings = $this->get_settings_for_display();
        $menu_orientation = $settings['menu_orientation'];
        $dropdown_trigger = $settings['dropdown_trigger'];
        
        // Generate unique ID for this menu instance
        $menu_id = 'mega-menu-' . $this->get_id();
        
        ?>
        <div class="custom-mega-menu <?php echo esc_attr($menu_orientation); ?>" 
             data-trigger="<?php echo esc_attr($dropdown_trigger); ?>"
             id="<?php echo esc_attr($menu_id); ?>">
            <ul class="mega-menu-container">
                <?php foreach ($settings['menu_items'] as $index => $item) : ?>
                    <?php 
                    $has_megamenu = !empty($item['has_megamenu']) && $item['has_megamenu'] === 'yes';
                    $link = !empty($item['item_link']['url']) ? $item['item_link']['url'] : '#';
                    $target = !empty($item['item_link']['is_external']) ? ' target="_blank"' : '';
                    $nofollow = !empty($item['item_link']['nofollow']) ? ' rel="nofollow"' : '';
                    ?>
                    <li class="mega-menu-item <?php echo $has_megamenu ? 'has-megamenu' : ''; ?>">
                        <a href="<?php echo esc_url($link); ?>" <?php echo $target . $nofollow; ?>>
                            <?php echo esc_html($item['item_title']); ?>
                            <?php if ($has_megamenu) : ?>
                                <span class="mega-menu-indicator"></span>
                            <?php endif; ?>
                        </a>
                        
                        <?php if ($has_megamenu && !empty($item['megamenu_template'])) : ?>
                            <div class="mega-menu-content">
                                <?php echo $this->get_template_content($item['megamenu_template']); ?>
                            </div>
                        <?php endif; ?>
                    </li>
                <?php endforeach; ?>
            </ul>
        </div>
        
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const megaMenu = document.getElementById('<?php echo esc_js($menu_id); ?>');
                const trigger = megaMenu.getAttribute('data-trigger');
                const menuItems = megaMenu.querySelectorAll('.has-megamenu');
                
                if (trigger === 'click') {
                    menuItems.forEach(function(item) {
                        const link = item.querySelector('a');
                        link.addEventListener('click', function(e) {
                            e.preventDefault();
                            item.classList.toggle('mega-menu-active');
                        });
                    });
                }
            });
        </script>
        <?php
    }

    private function get_elementor_templates() {
        $templates = [];
        
        // Get templates from Elementor
        $args = [
            'post_type' => 'elementor_library',
            'post_status' => 'publish',
            'posts_per_page' => -1,
        ];
        
        $query = new \WP_Query($args);
        
        if ($query->have_posts()) {
            while ($query->have_posts()) {
                $query->the_post();
                $templates[get_the_ID()] = get_the_title();
            }
        }
        
        wp_reset_postdata();
        
        return $templates;
    }
    
    private function get_template_content($template_id) {
        // Return rendered content of an Elementor template
        return \Elementor\Plugin::instance()->frontend->get_builder_content_for_display($template_id);
    }
}
    \Elementor\Plugin::instance()->widgets_manager->register_widget_type(new \MegaMenuWidget());
}
